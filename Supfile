# Supfile
version: 0.4

## variables can't have names that start exactly like a network name
env:
  OVZ: $(ostree admin status | grep -q ovz && echo 1 || echo 0)
  NETWORK: woods
  XFS_OPTS: rw,noatime,nodiratime,largeio,inode64,logbufs=8,logbsize=256k
  cluslist: /etc/cluster
  leadlist: /etc/leaders
  worklist: /etc/workers
  inventories: $cluslist $leadlist $worklist
  pinerepo: untoreh/pine
  trubrepo: untoreh/trub
  appsrepo: /var/lib/apps/repo
  ostree: ostree --repo=/var/lib/apps/repo
  trubartifact: /trub.tar
  trubdeltaartifact: delta-trub.tar

networks:
  local:
    hosts:
      - localhost
  cluster:
    inventory: cat /etc/cluster
  leaders:
    inventory: cat /etc/leaders
  workers:
    inventory: cat /etc/workers

## The "check" commands use the SUP_NETWORK_CHECK passed variable and not SUP_NETWORK directly
## because they are executed on the "local" network which bypasses ssh, so SUP_NETWORK would print "local"
commands:
  poke:
    run: echo boop
  whatnode:
    run: echo $NODE
  node-config:
    desc: configure current node hostname and domains which should be env vars defined in /etc/network-environment
    local: |
      hostname "$FQN" "$IPv4"
      [ -n "$IPv4" ] && echo -e "$IPv4\t$FQN" >> /etc/hosts || true
      [ -n "$IPv6" ] && echo -e "$IPv6\t$FQN" >> /etc/hosts || true
  network-local-check:
    desc: assert the current network is local
    run: |
      [ "$SUP_NETWORK_CHECK" != local ] && echo "not local network, terminating." && exit 1 || true
  network-leader-check:
    desc: assert the current node is part of the leaders network
    local: |
      [ "$SUP_NETWORK_CHECK" != leaders ] && echo "not leaders network, terminating." && exit 1 || true
  network-worker-check:
    desc: assert the current node is part of the workers network
    local: |
      [ "$SUP_NETWORK_CHECK" != workers ] && echo "not workers network, terminating." && exit 1 || true
  node-id-check:
    desc: NODE env var check
    run: |
      [ -z "$NODE" ] && echo "NODE id missing, set in /etc/network-environment" && exit 1 || true
    once: true
  docker-leader-check:
    desc: assert the current node is a docker leader
    local: |
      [ $(docker node ls -q | wc -l) -lt 1 ] && echo "please run from a leader node." && exit 1 || true
    once: true

targets:
  ssh-bootstrap:
    - ssh-checks
    - ssh-pub-key
    - ssh-dist-key
    - ssh-wrap
    - ssh-hosts-port
  etcd-bootstrap:
    - docker-leader-check
    - etcd-discovery-fetch
    - etcd-discovery-propagate
    - etcd-entries
    - etcd-docker-service-create
  swarm-bootstrap:
    - swarm-init
  swarm-clear:
    - docker-leader-check
    - swarm-disband
  beegfs-bootstrap:
    - node-id-check
  consul-bootstrap:
    - consul-install
    - consul-node-config
    - consul-agent-start
    - consul-encrypt
    - consul-join
  dup-bootstrap:
    - optbin
    - dup-install
    - dup-dist
    - dup-init
    - dup-add
    - dup-backup
